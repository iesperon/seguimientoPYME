<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<context:annotation-config />
	<context:component-scan base-package="es.udc.lbd.spring" />
	<mvc:annotation-driven />
	<tx:annotation-driven />

	<!-- DataSource -->
	<bean id="tfgDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/tfgdb" />
		<property name="username" value="postgres" />
		<property name="password" value="1234" />
	</bean>
	
	    <!--  SESSIONFACTORY BEAN   -->
    
    <!-- 
       En Spring, a interface "AbstractSessionFactoryBean" encapsula a tecnoloxía utilizada para a conexión coa BD
	   Nós queremos usar Hibernate 4, así que debemos usar a implementacion "hibernate4.LocalSessionFactoryBean"
	   A factoría creará (e devolverá) un bean "SessionFactory" de Hibernate
	   Ese é o xeito de compartir unha session factory con Spring (e de proporcionarllela, por exemplo, aos DAOS) mediante inxeccion de dependencias
	   Aforramos a típica clase "Utils"
	   Se quixeramos cambiar de DAOS, usariamos outra factoría de conexions
	  -->     
    
    <bean id="tfgSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="tfgDataSource"/>
        <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
	        	<prop key="hibernate.show_sql">true</prop>
	        	<prop key="hibernate.format_sql">true</prop>
	        	<prop key="hibernate.use_sql_comments">true</prop>	        	
	        	<!-- <prop key="hibernate.current_session_context_class">org.hibernate.context.internal.ThreadLocalSessionContext</prop>  -->
				<prop key="hibernate.c3p0.min_size">5</prop>
				<prop key="hibernate.c3p0.max_size">20</prop>
				<prop key="hibernate.c3p0.timeout">300</prop>
				<prop key="hibernate.c3p0.max_statements">50</prop>
				<prop key="hibernate.c3p0.idle_test_period">3000</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				
				<!-- 
				hibernate.hbm2ddl.auto
				So the list of possible options are,
				validate: validate the schema, makes no changes to the database.
				update: update the schema.
				create: creates the schema, destroying previous data.
				create-drop: drop the schema at the end of the session. 
				 -->
 
        	</props>            
        </property>
        <!--  Usamos anotacións de Hibernate: hai que dicirlle ónde buscalas -->
        <property name="packagesToScan" value="es.udc.fi.lbd.monuzz.id.cursos.model" />
    </bean>

	<!-- JBDC Template -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="tfgDataSource" />
	</bean>

	<!-- Transaction Management -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="tfgDataSource" />
	</bean>

	<!-- Tiles configuration -->
	<bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" />

	<bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles/*.xml</value>
			</list>
		</property>
	</bean>

	<!-- Web resources (CSS, img, etc.) -->
	<mvc:resources mapping="/resources/**" location="/resources/"
		cache-period="31556926" />

	<!-- Internationalization -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en_EN" />
	</bean>

	<mvc:interceptors>
		<bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="language" />
		</bean>
	</mvc:interceptors>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
	</bean>

	<!-- Authentication -->
	
	<!-- enable use-expressions -->
	<sec:http auto-config="true" use-expressions="true">
		
		<sec:intercept-url pattern="/issue/**" access="hasRole('ROLE_AUTHENTICATED')" />
		
		<!-- access denied page -->
		<sec:access-denied-handler error-page="/403" />
		
		<sec:form-login 
		    login-page="/login" 
		    default-target-url="/" 
			authentication-failure-url="/login?error" 
			username-parameter="login"
			password-parameter="password" />
			
		<sec:logout
			logout-url="/logout"
			logout-success-url="/" />
		
		<!-- enable CSRF protection -->
		<sec:csrf/>
	</sec:http>
	
	<!-- Select users and user_roles from database -->
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:jdbc-user-service id="userService" data-source-ref="tfgDataSource"
				users-by-username-query="SELECT login, password, enabled FROM Users WHERE login = ?"
				authorities-by-username-query="SELECT login, role FROM UserRoles WHERE login = ?" />
		</sec:authentication-provider>
	</sec:authentication-manager>

</beans>