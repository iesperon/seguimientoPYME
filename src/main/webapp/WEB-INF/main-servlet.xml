<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.0.xsd">


	<context:annotation-config />
	<context:component-scan base-package="es.udc.fi.tfg" />
	<mvc:annotation-driven />
	<tx:annotation-driven />

	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- DataSource -->
	<bean id="tfgDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/tfgdb" />
		<property name="username" value="postgres" />
		<property name="password" value="1234" />
	</bean>

	<bean id="tfgSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="tfgDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- <prop key="hibernate.current_session_context_class">org.hibernate.context.internal.ThreadLocalSessionContext</prop> -->
				<prop key="hibernate.c3p0.min_size">5</prop>
				<prop key="hibernate.c3p0.max_size">20</prop>
				<prop key="hibernate.c3p0.timeout">300</prop>
				<prop key="hibernate.c3p0.max_statements">50</prop>
				<prop key="hibernate.c3p0.idle_test_period">3000</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>

				<!-- hibernate.hbm2ddl.auto So the list of possible options are, validate: 
					validate the schema, makes no changes to the database. update: update the 
					schema. create: creates the schema, destroying previous data. create-drop: 
					drop the schema at the end of the session. -->

			</props>
		</property>
		<!-- Usamos anotacións de Hibernate: hai que dicirlle ónde buscalas -->
		<property name="packagesToScan" value="es.udc.fi.tfg.seguimiento.model" />
	</bean>

	<!-- Transaction Management -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="tfgSessionFactory" />
	</bean>



	<!-- JBDC Template -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="tfgDataSource" />
	</bean>



	<!-- SESSIONFACTORY BEAN -->

	<!-- En Spring, a interface "AbstractSessionFactoryBean" encapsula a tecnoloxía 
		utilizada para a conexión coa BD Nós queremos usar Hibernate 4, así que debemos 
		usar a implementacion "hibernate4.LocalSessionFactoryBean" A factoría creará 
		(e devolverá) un bean "SessionFactory" de Hibernate Ese é o xeito de compartir 
		unha session factory con Spring (e de proporcionarllela, por exemplo, aos 
		DAOS) mediante inxeccion de dependencias Aforramos a típica clase "Utils" 
		Se quixeramos cambiar de DAOS, usariamos outra factoría de conexions -->



	<!-- Tiles configuration -->

	<bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" />

	<bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles/*.xml</value>
			</list>
		</property>
	</bean>



	<!-- View Resolver -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/WEB-INF/jsp/" /> <property name="suffix" 
		value=".jsp" /> </bean> -->

	<!-- Web resources (CSS, img, etc.) -->
	<mvc:resources mapping="/resources/**" location="/resources/"
		cache-period="31556926" />

	<!-- Internationalization -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en_EN" />
	</bean>

	<mvc:interceptors>
		<bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="language" />
		</bean>
	</mvc:interceptors>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
	</bean>

	<!-- Authentication -->

	<!-- enable use-expressions -->


	<sec:http auto-config="true" use-expressions="true">

		<sec:intercept-url pattern="/index.jsp" access="permitAll" />
		<sec:intercept-url pattern="/catalogo/**" access="permitAll" />
		<sec:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/user/**" access="hasRole('ROLE_USER')" />



		<sec:access-denied-handler error-page="/403" />

		<!-- -->

		<sec:form-login login-page="/" default-target-url="/welcome"
			authentication-failure-url="/?error" username-parameter="email"
			password-parameter="contrasena" />

		<sec:logout logout-url="/logout" logout-success-url="/" />

		<sec:csrf />
	</sec:http>

	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:jdbc-user-service data-source-ref="tfgDataSource"
				users-by-username-query="SELECT email, contrasena, enabled FROM Usuarios WHERE email = ?"
				authorities-by-username-query="SELECT u.email, r.rol FROM Rol r JOIN Usuarios u ON r.idRol=u.idRol WHERE u.email = ?" />
		</sec:authentication-provider>
	</sec:authentication-manager>


	<bean name="miServletFileUpload"
		class="org.apache.commons.fileupload.servlet.ServletFileUpload">
		<constructor-arg index="0">
			<ref bean="miDiskFileItemFactory" />
		</constructor-arg>
		<property name="sizeMax" value="4194304" />
	</bean>

	<bean id="miDiskFileItemFactory" class="org.apache.commons.fileupload.disk.DiskFileItemFactory" />

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSizePerFile" value="5242880" />
	</bean>

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="mipymeon@gmail.com" />
		<property name="password" value="76933725j" />

		<!-- The name of the property, following JavaBean naming conventions -->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	<bean id="mailMail" class="es.udc.fi.tfg.seguimiento.utils.MailMail">
		<property name="mailSender" ref="mailSender" />
	</bean>
</beans>